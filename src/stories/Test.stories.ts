import Test from "./Test";
import { Meta } from '@storybook/react';

const meta: Meta<typeof Test> = {
  component: Test,
  title: "Editor",
};
export default meta;

export const Default = {
  args: {
    value: "# Development\n\n## Local development\n\n[Storybook](https://storybook.js.org/) is used for the development time environment.\n\nTo get the _/local/_ **environment** `running` **locally**, just:\n\n1. Install dependencies: `yarn install`\n2. Start storybook: `yarn storybook`\n\nThis should open the Storybook workshop in the browser. If it doesn't open\nautomatically, you can also manually navigate to `http://localhost:6006/`.\n\n## Linking to projects\n\nLinking local npm libraries to projects where they are used can be a painful process with the built in `yarn link` command which is why it is adviceable to install [Yalc](https://github.com/wclr/yalc) globally and use that instead.\n\nBuild and publish a local version of the package:\n\n```sh\nyarn build && yalc publish --push\n```\n\nThen inside your project install the local version:\n\n```sh\nyalc add @fidelix/fx-miranda && yarn install\n```\n\nOnce you are done developing and testing the local version of the package in your project you can remove the linkage by running the following in your project:\n\n```sh\nyalc remove @fidelix/fx-miranda && yarn install\n```\n\n## Build and test\n\n### Build\n\n1. Install dependencies `yarn install`\n2. Execute build script: `yarn build`\n\nCompiled files are outputted to `dist` -folder.\n[ts-patch](https://github.com/nonara/ts-patch) is used for compiling the\nTypescript code to Javascript (and generating Typescript declaration files).\n\nTODO: Tests?\n\n## Design system\n\nWe're using a tool called [Figmage](https://github.com/Temzasse/figmage) to\ngenerate design tokens and code (colors, typography styles, icons) from a Figma\nfile.\n\nTo regenerate the code, you need to first setup your `.env`-file. The\n`.env.example` shows what is should have:\n\n```\nFIGMA_ACCESS_TOKEN=xxxx\nFIGMA_FILE_ID=xxxx\n```\n\nThe file id is the id shown in Figma at the beginning of the url of the specific\nFigma file:\n\n```\nhttp://figma.com/file/THE_FILE_ID_IS_HERE/...\n```\n\nThe access token is a personal token, specific to your account. Be mindful that\nit gives access to all Figma files you have access to, so it should be kept\nstrictly for personal use. This is the reason why the token is not shared in the\nrepo or Azure Key Vault. For now, Figma doesn't support file-specific access\ntokens.\n\nInstructions on how to generate the personal access token are available\n[here](https://www.figma.com/developers/api#access-tokens).\n\nAfter creating a `.env`-file with the aforementioned information, the tool can\nbe run with:\n\n```bash\nyarn design-system:generate\n```\n\nThis will re-populate `src/generated/design-system` with updated files.\n\n**NOTE:** Figma doesn't publish all changes to the API directly, so to see the\neffects on the generated code, you may need to [publish the changes in figma\nfirst](https://help.figma.com/hc/en-us/articles/360025508373-Publish-a-library).\n\n## Troubleshooting\n\n### Dependencies\n\nThe `strip-ansi` package is used by eslint, but for some reason, with yarn's module\nresolution we automatically end up with a version of the library that doesn't\nwork, causing eslint to not work. Installing the eslint's defined version\nmanually fixes this.\n\nSimilar error with `storybook` and `string-width` packages.\n\n### Bottom panel not showing in the Storybook workshop\n\nThe bottom panel shows information about the component we're examining.\nSometimes the UI can get into a jam, causing the bottom panel to just not be\nvisible. Try executing `localStorage.clear()` in the development tool console to\nclear the UI state.\n"
  }
};
